//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/org/lukhnos/lucenestudy/Suggester.java
//

#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/suggest/DocumentDictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/search/suggest/Lookup.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/lukhnos/lucenestudy/Indexer.h"
#include "org/lukhnos/lucenestudy/Suggester.h"
#include "org/lukhnos/lucenestudy/Util.h"
#include "org/lukhnos/portmobile/file/Files.h"
#include "org/lukhnos/portmobile/file/Path.h"
#include "org/lukhnos/portmobile/file/Paths.h"

#if !__has_feature(objc_arc)
#error "org/lukhnos/lucenestudy/Suggester must be compiled with ARC (-fobjc-arc)"
#endif

NSString *OrgLukhnosLucenestudySuggester_INDEX_NAME = @"suggestion";

@implementation OrgLukhnosLucenestudySuggester

- (instancetype)initWithNSString:(NSString *)indexRoot {
  OrgLukhnosLucenestudySuggester_initWithNSString_(self, indexRoot);
  return self;
}

+ (OrgLukhnosPortmobileFilePath *)getSuggestionIndexPathWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)indexRoot {
  return OrgLukhnosLucenestudySuggester_getSuggestionIndexPathWithOrgLukhnosPortmobileFilePath_(indexRoot);
}

+ (void)rebuildWithNSString:(NSString *)indexRoot {
  OrgLukhnosLucenestudySuggester_rebuildWithNSString_(indexRoot);
}

- (id<JavaUtilList>)suggestWithNSString:(NSString *)query {
  id<JavaUtilList> results = [((OrgApacheLuceneSearchSuggestAnalyzingAnalyzingInfixSuggester *) nil_chk(suggester_)) lookupWithJavaLangCharSequence:query withInt:suggestionCount_ withBoolean:false withBoolean:true];
  id<JavaUtilList> suggestions = new_JavaUtilArrayList_init();
  for (OrgApacheLuceneSearchSuggestLookup_LookupResult * __strong result in nil_chk(results)) {
    if ([((OrgApacheLuceneSearchSuggestLookup_LookupResult *) nil_chk(result))->highlightKey_ isKindOfClass:[NSString class]]) {
      [suggestions addWithId:(NSString *) result->highlightKey_];
    }
    else {
      [suggestions addWithId:[((id<JavaLangCharSequence>) nil_chk(result->key_)) description]];
    }
  }
  return suggestions;
}

- (void)close {
  [((OrgApacheLuceneSearchSuggestAnalyzingAnalyzingInfixSuggester *) nil_chk(suggester_)) close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LOrgLukhnosPortmobileFilePath;", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 0, 1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 5, 0, 1, 6, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getSuggestionIndexPathWithOrgLukhnosPortmobileFilePath:);
  methods[2].selector = @selector(rebuildWithNSString:);
  methods[3].selector = @selector(suggestWithNSString:);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_SUGGESTION_COUNT", "I", .constantValue.asInt = OrgLukhnosLucenestudySuggester_DEFAULT_SUGGESTION_COUNT, 0x18, -1, -1, -1, -1 },
    { "INDEX_NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 8, -1, -1 },
    { "indexRootPath_", "LOrgLukhnosPortmobileFilePath;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "suggester_", "LOrgApacheLuceneSearchSuggestAnalyzingAnalyzingInfixSuggester;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "suggestionCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaIoIOException;", "getSuggestionIndexPath", "LOrgLukhnosPortmobileFilePath;", "rebuild", "suggest", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "LJavaLangException;", &OrgLukhnosLucenestudySuggester_INDEX_NAME };
  static const J2ObjcClassInfo _OrgLukhnosLucenestudySuggester = { "Suggester", "org.lukhnos.lucenestudy", ptrTable, methods, fields, 7, 0x1, 5, 5, -1, -1, -1, -1, -1 };
  return &_OrgLukhnosLucenestudySuggester;
}

@end

void OrgLukhnosLucenestudySuggester_initWithNSString_(OrgLukhnosLucenestudySuggester *self, NSString *indexRoot) {
  NSObject_init(self);
  self->indexRootPath_ = OrgLukhnosPortmobileFilePaths_getWithNSString_(indexRoot);
  OrgApacheLuceneAnalysisAnalyzer *analyzer = OrgLukhnosLucenestudyIndexer_getAnalyzer();
  OrgApacheLuceneStoreDirectory *suggestionDir = OrgApacheLuceneStoreFSDirectory_openWithOrgLukhnosPortmobileFilePath_(OrgLukhnosLucenestudySuggester_getSuggestionIndexPathWithOrgLukhnosPortmobileFilePath_(self->indexRootPath_));
  self->suggester_ = new_OrgApacheLuceneSearchSuggestAnalyzingAnalyzingInfixSuggester_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_(suggestionDir, analyzer);
  self->suggestionCount_ = OrgLukhnosLucenestudySuggester_DEFAULT_SUGGESTION_COUNT;
}

OrgLukhnosLucenestudySuggester *new_OrgLukhnosLucenestudySuggester_initWithNSString_(NSString *indexRoot) {
  J2OBJC_NEW_IMPL(OrgLukhnosLucenestudySuggester, initWithNSString_, indexRoot)
}

OrgLukhnosLucenestudySuggester *create_OrgLukhnosLucenestudySuggester_initWithNSString_(NSString *indexRoot) {
  J2OBJC_CREATE_IMPL(OrgLukhnosLucenestudySuggester, initWithNSString_, indexRoot)
}

OrgLukhnosPortmobileFilePath *OrgLukhnosLucenestudySuggester_getSuggestionIndexPathWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *indexRoot) {
  OrgLukhnosLucenestudySuggester_initialize();
  return [((OrgLukhnosPortmobileFilePath *) nil_chk(indexRoot)) resolveWithNSString:OrgLukhnosLucenestudySuggester_INDEX_NAME];
}

void OrgLukhnosLucenestudySuggester_rebuildWithNSString_(NSString *indexRoot) {
  OrgLukhnosLucenestudySuggester_initialize();
  OrgLukhnosPortmobileFilePath *indexRootPath = OrgLukhnosPortmobileFilePaths_getWithNSString_(indexRoot);
  OrgLukhnosPortmobileFilePath *suggestionPath = OrgLukhnosLucenestudySuggester_getSuggestionIndexPathWithOrgLukhnosPortmobileFilePath_(indexRootPath);
  if (OrgLukhnosPortmobileFileFiles_existsWithOrgLukhnosPortmobileFilePath_(suggestionPath)) {
    OrgLukhnosLucenestudyUtil_deletePathWithOrgLukhnosPortmobileFilePath_(suggestionPath);
  }
  OrgApacheLuceneAnalysisAnalyzer *analyzer = OrgLukhnosLucenestudyIndexer_getAnalyzer();
  OrgApacheLuceneStoreDirectory *suggestionDir = OrgApacheLuceneStoreFSDirectory_openWithOrgLukhnosPortmobileFilePath_(OrgLukhnosLucenestudySuggester_getSuggestionIndexPathWithOrgLukhnosPortmobileFilePath_(indexRootPath));
  OrgApacheLuceneSearchSuggestAnalyzingAnalyzingInfixSuggester *suggester = new_OrgApacheLuceneSearchSuggestAnalyzingAnalyzingInfixSuggester_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneAnalysisAnalyzer_(suggestionDir, analyzer);
  OrgApacheLuceneStoreDirectory *indexDir = OrgApacheLuceneStoreFSDirectory_openWithOrgLukhnosPortmobileFilePath_(OrgLukhnosLucenestudyIndexer_getMainIndexPathWithOrgLukhnosPortmobileFilePath_(indexRootPath));
  OrgApacheLuceneIndexIndexReader *reader = OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneStoreDirectory_(indexDir);
  OrgApacheLuceneSearchSuggestDocumentDictionary *docDict = new_OrgApacheLuceneSearchSuggestDocumentDictionary_initWithOrgApacheLuceneIndexIndexReader_withNSString_withNSString_(reader, OrgLukhnosLucenestudyIndexer_TITLE_FIELD_NAME, nil);
  id<OrgApacheLuceneSearchSuggestInputIterator> iterator = [docDict getEntryIterator];
  id<JavaUtilSet> titleSet = new_JavaUtilHashSet_init();
  OrgApacheLuceneUtilBytesRef *next;
  while ((next = [((id<OrgApacheLuceneSearchSuggestInputIterator>) nil_chk(iterator)) next]) != nil) {
    if ([titleSet containsWithId:next]) {
      continue;
    }
    [titleSet addWithId:next];
    [suggester addWithOrgApacheLuceneUtilBytesRef:next withJavaUtilSet:nil withLong:0 withOrgApacheLuceneUtilBytesRef:nil];
  }
  [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) close];
  [suggester commit];
  [suggester close];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgLukhnosLucenestudySuggester)
