//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/org/lukhnos/lucenestudy/MinimalHTMLEncoder.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/lukhnos/lucenestudy/MinimalHTMLEncoder.h"

#if !__has_feature(objc_arc)
#error "org/lukhnos/lucenestudy/MinimalHTMLEncoder must be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgLukhnosLucenestudyMinimalHTMLEncoder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgLukhnosLucenestudyMinimalHTMLEncoder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setNewlineToBrWithBoolean:(jboolean)newlineToBr {
  self->newlineToBr_ = newlineToBr;
}

- (NSString *)encodeTextWithNSString:(NSString *)plainText {
  if (plainText == nil || [plainText java_length] == 0) {
    return @"";
  }
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_initWithInt_([plainText java_length]);
  for (jint index = 0; index < [plainText java_length]; index++) {
    jchar ch = [plainText charAtWithInt:index];
    switch (ch) {
      case '&':
      (void) [result appendWithNSString:@"&amp;"];
      break;
      case '<':
      (void) [result appendWithNSString:@"&lt;"];
      break;
      case '>':
      (void) [result appendWithNSString:@"&gt;"];
      break;
      default:
      if (newlineToBr_ && ch == 0x000a) {
        (void) [result appendWithNSString:@"<br>"];
      }
      else {
        (void) [result appendWithChar:ch];
      }
    }
  }
  return [result description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setNewlineToBrWithBoolean:);
  methods[2].selector = @selector(encodeTextWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "newlineToBr_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setNewlineToBr", "Z", "encodeText", "LNSString;" };
  static const J2ObjcClassInfo _OrgLukhnosLucenestudyMinimalHTMLEncoder = { "MinimalHTMLEncoder", "org.lukhnos.lucenestudy", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgLukhnosLucenestudyMinimalHTMLEncoder;
}

@end

void OrgLukhnosLucenestudyMinimalHTMLEncoder_init(OrgLukhnosLucenestudyMinimalHTMLEncoder *self) {
  NSObject_init(self);
  self->newlineToBr_ = false;
}

OrgLukhnosLucenestudyMinimalHTMLEncoder *new_OrgLukhnosLucenestudyMinimalHTMLEncoder_init() {
  J2OBJC_NEW_IMPL(OrgLukhnosLucenestudyMinimalHTMLEncoder, init)
}

OrgLukhnosLucenestudyMinimalHTMLEncoder *create_OrgLukhnosLucenestudyMinimalHTMLEncoder_init() {
  J2OBJC_CREATE_IMPL(OrgLukhnosLucenestudyMinimalHTMLEncoder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgLukhnosLucenestudyMinimalHTMLEncoder)
